import React, { useEffect, useState } from 'react';
import Image from 'next/image';
import WithdrawBlock from './WithdrawBlock';
import MachineForm from './admin/MachineForm';
import type { MachineFormData } from './admin/MachineForm';
import { useToast } from '@/components/ui/ToastProvider';

export type Machine = {
  id: string;
  publicName: string;
  cpu: string;
  gpu: string;
  ram: string;
  hourlyRate: number;
  status: string;
  moderationStatus: string;
  moderationComment?: string;
  screenshotUrl?: string;
  tailscaleIp?: string;
  sunshinePin?: string;
  sessionsCount?: number;
  totalIncome?: number;
  totalMinutes?: number;
};

const TELEGRAM_BOT_LINK = 'https://t.me/your_support_bot';

export default function MerchantDashboard() {
  const { showToast } = useToast();
  const [machines, setMachines] = useState<Machine[]>([]);
  const [balance, setBalance] = useState<number>(0);
  const [loading, setLoading] = useState(true);
  const [showForm, setShowForm] = useState(false);
  const [games, setGames] = useState<{ id: string; title: string }[]>([]);
  
interface Transaction {
  id: string;
  type: string;
  amount: number;
  description?: string;
  status?: string;
  createdAt: string;
}
const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [showTx, setShowTx] = useState(false);
  const [txType, setTxType] = useState<string>('');

  useEffect(() => {
    fetch('/api/merchant/me')
      .then(res => res.json())
      .then(data => {
        setMachines(data.machines);
        setBalance(data.balance);
        setLoading(false);
      });
    fetch('/api/merchant/stat')
      .then(res => res.json())
      .then(stats => {
        setMachines(machines => machines.map(m => ({
          ...m,
          sessionsCount: stats[m.id]?.sessionsCount || 0,
          totalIncome: stats[m.id]?.totalIncome || 0,
          totalMinutes: stats[m.id]?.totalMinutes || 0,
        })));
      });
    fetch('/api/games')
      .then(res => res.json())
      .then(setGames);
  }, []);

  useEffect(() => {
    if (!showTx) return;
    fetch('/api/transactions' + (txType ? `?type=${txType}` : ''))
      .then(res => res.json())
      .then(setTransactions);
  }, [showTx, txType]);

  const handleAddMachine = async (form: MachineFormData) => {
    try {
      const res = await fetch('/api/machines', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form),
      });
      if (res.ok) {
        showToast('–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏.', 'success');
        setShowForm(false);
        setLoading(true);
        fetch('/api/merchant/me')
          .then(res => res.json())
          .then(data => {
            setMachines(data.machines);
            setBalance(data.balance);
            setLoading(false);
          });
      } else {
        let errMsg = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞';
        try {
          const err = await res.json();
          errMsg = err.error || errMsg;
        } catch {}
        showToast(errMsg, 'error');
      }
    } catch (error) {
      console.error(error);
      showToast('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞', 'error');
    }
  };

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    <div className="p-4">
      <h2 className="text-2xl font-bold mb-4">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –º–µ—Ä—á–∞–Ω—Ç–∞</h2>
      <button
        className={`mb-4 px-4 py-2 rounded ${showTx ? 'bg-blue-600 text-white' : 'bg-zinc-800 text-blue-300'}`}
        onClick={() => setShowTx(v => !v)}
      >
        {showTx ? '–°–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π' : '–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π'}
      </button>
      {showTx && (
        <div className="mb-6">
          <h3 className="text-lg font-bold mb-2">–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</h3>
          <div className="mb-2">
            <select
              className="px-2 py-1 rounded bg-zinc-900 text-white border border-zinc-600"
              value={txType}
              onChange={e => setTxType(e.target.value)}
            >
              <option value="">–í—Å–µ</option>
              <option value="topup">–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</option>
              <option value="session">–°–µ—Å—Å–∏—è</option>
              <option value="payout">–í—ã–ø–ª–∞—Ç–∞</option>
              <option value="withdraw">–í—ã–≤–æ–¥</option>
            </select>
          </div>
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm">
              <thead>
                <tr className="bg-zinc-800 text-blue-300">
                  <th className="px-2 py-1 text-left">–î–∞—Ç–∞</th>
                  <th className="px-2 py-1 text-left">–¢–∏–ø</th>
                  <th className="px-2 py-1 text-left">–°—É–º–º–∞</th>
                  <th className="px-2 py-1 text-left">–û–ø–∏—Å–∞–Ω–∏–µ</th>
                  <th className="px-2 py-1 text-left">–°—Ç–∞—Ç—É—Å</th>
                </tr>
              </thead>
              <tbody>
                {transactions.length === 0 && (
                  <tr><td colSpan={4} className="text-center py-2 text-zinc-400">–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</td></tr>
                )}
                {transactions.map(tx => {
                  let icon = 'üí∏';
                  if (tx.type === 'topup') icon = '‚¨ÜÔ∏è';
                  else if (tx.type === 'session') icon = 'üéÆ';
                  else if (tx.type === 'payout') icon = 'üí∞';
                  const isIncome = tx.amount > 0;
                  return (
                    <tr key={tx.id} className="border-b border-zinc-800">
                      <td className="px-2 py-1 whitespace-nowrap">{new Date(tx.createdAt).toLocaleString()}</td>
                      <td className="px-2 py-1 flex items-center gap-1">{icon} {tx.type}</td>
                      <td className={`px-2 py-1 font-semibold ${isIncome ? 'text-green-400' : 'text-red-400'}`}>{isIncome ? '+' : ''}{(tx.amount/100).toFixed(2)} ‚Ç∏</td>
                      <td className="px-2 py-1 max-w-xs truncate" title={tx.description}>{tx.description || '-'}</td>
                      <td className="px-2 py-1">
                        {tx.type === 'withdraw' ? (tx.status === 'pending' ? '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ' : tx.status === 'done' ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : tx.status === 'rejected' ? '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ' : tx.status) : ''}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      )}

      <div className="mb-4 p-4 bg-blue-50 rounded border border-blue-200">
        <div className="mb-2 font-semibold text-blue-900">–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</div>
        <div className="mb-2 text-sm text-blue-800">
          <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã:
          <ol className="list-decimal ml-5 mt-2 mb-2">
            <li>–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ.</li>
            <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π <b>ID –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã</b> –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <span className="font-mono">3P23H</span>).</li>
            <li>–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, HWinfo, CPU-Z –∏ —Ç.–¥.).</li>
            <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>ID</b> –∏ <b>—Å–∫—Ä–∏–Ω—à–æ—Ç</b> –º–µ–Ω–µ–¥–∂–µ—Ä—É —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</li>
          </ol>
          –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Ä—É—á–Ω—É—é –ø—Ä–∏—Å–≤–æ–∏—Ç –≤–∞—à–µ–π –º–∞—à–∏–Ω–µ —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
        </div>
        <a
          href={TELEGRAM_BOT_LINK}
          target="_blank"
          rel="noopener noreferrer"
          className="inline-block mt-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (Telegram)
        </a>
      </div>
      <div className="mb-4 flex flex-col gap-2 sm:flex-row sm:items-center">
        <span className="font-semibold">–í–∞—à –±–∞–ª–∞–Ω—Å:</span> {balance} ‚Ç∏
        <button className="ml-4 px-3 py-1 bg-blue-600 text-white rounded" onClick={() => setShowForm(true)}>
          + –î–æ–±–∞–≤–∏—Ç—å –ü–ö/–∫–æ–Ω—Å–æ–ª—å
        </button>
        <WithdrawBlock balance={balance} onSuccess={() => {
          showToast('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', 'success');
          setLoading(true);
          fetch('/api/merchant/me').then(res => res.json()).then(data => {
            setBalance(data.balance);
            setLoading(false);
          });
        }} onError={(msg: string) => showToast(msg, 'error')} />
      </div>
      <h3 className="text-lg font-semibold mb-2">–ú–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã</h3>
      {machines.length === 0 && <div>–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.</div>}
      {machines.map(machine => (
        <div key={machine.id} className="bg-zinc-900 rounded p-4 mb-4">
          <div className="font-bold text-white mb-1">{machine.publicName}</div>
          <div className="text-sm text-zinc-400 mb-1">CPU: {machine.cpu} | GPU: {machine.gpu} | RAM: {machine.ram}</div>
          <div className="text-sm text-zinc-400 mb-1">–¶–µ–Ω–∞: {machine.hourlyRate} ‚Ç∏/—á–∞—Å</div>
          <div className="text-xs text-zinc-500 mb-1">–°—Ç–∞—Ç—É—Å: {machine.status}</div>
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—à–∏–Ω–µ */}
          <div className="text-xs text-green-400 mt-1">
            –°–µ—Å—Å–∏–π: {machine.sessionsCount ?? 0} | –î–æ—Ö–æ–¥: {machine.totalIncome ?? 0} ‚Ç∏ | –ß–∞—Å–æ–≤ –∞—Ä–µ–Ω–¥—ã: {((machine.totalMinutes ?? 0) / 60).toFixed(1)}
          </div>
          <div className="text-xs text-zinc-500 mb-1">–ú–æ–¥–µ—Ä–∞—Ü–∏—è: {machine.moderationStatus}</div>
          {machine.moderationComment && (
            <div className="text-xs text-red-400 mb-1">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {machine.moderationComment}</div>
          )}
          {machine.screenshotUrl && (
            <Image src={machine.screenshotUrl} alt="–°–∫—Ä–∏–Ω—à–æ—Ç" width={192} height={128} className="w-48 h-32 object-contain mb-2" />
          )}
          <div className="text-xs text-zinc-500 mb-1">–°–µ—Å—Å–∏–π: {machine.sessionsCount || 0}</div>
          <div className="text-xs text-zinc-500 mb-1">–î–æ—Ö–æ–¥: {machine.totalIncome || 0} ‚Ç∏</div>
          <div className="text-xs text-zinc-500 mb-1">–ß–∞—Å–æ–≤ –∞—Ä–µ–Ω–¥—ã: {machine.totalMinutes ? (machine.totalMinutes/60).toFixed(1) : 0}</div>
          {/* –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ */}
        </div>
      ))}
      {showForm ? (
        <div className="my-4">
          <MachineForm onSubmit={handleAddMachine} games={games} />
          <button className="mt-2 px-4 py-2 bg-zinc-700 text-white rounded" onClick={() => setShowForm(false)}>
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      ) : (
        <button className="mt-4 px-4 py-2 bg-green-600 text-white rounded" onClick={() => setShowForm(true)}>
          –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
        </button>
      )}
    </div>
  );
}
