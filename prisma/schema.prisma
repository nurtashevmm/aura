// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum MachineStatus {
  AVAILABLE
  BUSY
  MAINTENANCE
}

enum ModerationStatus {
  PENDING_MODERATION
  AVAILABLE
  REJECTED
}

enum UserRole {
  PLAYER
  MERCHANT
  ADMIN
}

// MODELS

model Machine {
  id                 String        @id @default(cuid())
  name               String
  cpu                String
  gpu                String
  ram                String
  ipAddress          String        @unique
  sunshine_username  String
  sunshine_password  String
  status             MachineStatus @default(AVAILABLE)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  sessions           Session[]
  publicName         String
  moderationStatus   ModerationStatus @default(PENDING_MODERATION)
  moderationComment  String?
  screenshotUrl      String?
  tailscaleIp        String?
  sunshinePin        String?
  sunshineApiKey     String?
  agentSecret        String?
  hourlyRate         Int
  type               String
  tier               String
  os                 String
  ownerId            String
  owner              User     @relation("UserMachines", fields: [ownerId], references: [id])
  games              Game[]   @relation("MachineGames")
  reviews             Review[]
}

model Session {
  id                 String   @id @default(cuid())
  machineId          String
  machine            Machine  @relation(fields: [machineId], references: [id])
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  sunshine_user_id   String
  temp_username      String
  temp_password      String
  token             String?
  tokenExpiresAt    DateTime?
  pin               String?
  pinExpiresAt      DateTime?
  tokenUsedAt       DateTime?
  startTime          DateTime @default(now())
  endTime            DateTime?
  maxMinutes         Int?
  lastHeartbeat      DateTime?
  
  @@index([machineId])
  @@index([userId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role         UserRole   @default(PLAYER)
  balance      Int        @default(0)
  resources    Machine[]  @relation("UserMachines")
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  auditLogs    AuditLog[]
  resetToken    String?
  resetTokenExpires DateTime?
  transactions Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id        String   @id @default(cuid())
  title     String
  genre     String
  coverUrl  String
  minPrice  Int
  machines  Machine[] @relation("MachineGames")

  @@unique([title])
}

model ContentBlock {
  id        String   @id @default(cuid())
  blockId   String   @unique
  content   String   @db.Text
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  machineId String
  machine   Machine  @relation(fields: [machineId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   String?
  ip        String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String   // 'topup', 'withdraw', 'payout', 'session', etc.
  amount      Int      // В копейках/тиынах для точности
  description String?
  createdAt   DateTime @default(now())
}

